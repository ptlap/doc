name: CI/CD

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.12.1'

jobs:
  quality:
    name: Quality (typecheck, lint, format)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Enable Corepack
        run: corepack enable
      - name: Activate pnpm via Corepack
        run: corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - name: Show pnpm version
        run: pnpm -v
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Type check
        run: pnpm type-check
      - name: Lint
        run: pnpm lint
      - name: Format check
        run: pnpm format:check

  test-backend:
    name: Backend tests
    runs-on: ubuntu-latest
    needs: quality
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ai_document_assistant_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Enable Corepack
        run: corepack enable
      - name: Activate pnpm via Corepack
        run: corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - name: Show pnpm version
        run: pnpm -v
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Prisma generate + db push
        run: |
          cd apps/backend
          pnpm exec prisma generate
          pnpm exec prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_document_assistant_test
      - name: Run backend tests
        run: pnpm --filter @ai-doc-assistant/backend test
        env:
          CI: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ai_document_assistant_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

  build:
    name: Build apps
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        app: [frontend, backend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Enable Corepack
        run: corepack enable
      - name: Activate pnpm via Corepack
        run: corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
      - name: Show pnpm version
        run: pnpm -v
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build
        run: pnpm build --filter=@ai-doc-assistant/${{ matrix.app }}

  docker:
    name: Build and publish Docker images (GHCR)
    runs-on: ubuntu-latest
    needs: [build, test-backend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Compute tags
        id: meta
        shell: bash
        run: |
          REPO_OWNER_LOWER=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          echo "OWNER=${REPO_OWNER_LOWER}" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" == refs/heads/main ]]; then
            echo "TAG1=latest" >> $GITHUB_OUTPUT
            echo "TAG2=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          else
            TAG=${GITHUB_REF#refs/tags/}
            echo "TAG1=${TAG}" >> $GITHUB_OUTPUT
            echo "TAG2=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          fi
      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: tools/docker/Dockerfile.backend
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.meta.outputs.TAG1 }}
          tags: |
            ghcr.io/${{ steps.meta.outputs.OWNER }}/ai-doc-assistant-backend:${{ steps.meta.outputs.TAG1 }}
            ghcr.io/${{ steps.meta.outputs.OWNER }}/ai-doc-assistant-backend:${{ steps.meta.outputs.TAG2 }}
      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: tools/docker/Dockerfile.frontend
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.meta.outputs.TAG1 }}
          tags: |
            ghcr.io/${{ steps.meta.outputs.OWNER }}/ai-doc-assistant-frontend:${{ steps.meta.outputs.TAG1 }}
            ghcr.io/${{ steps.meta.outputs.OWNER }}/ai-doc-assistant-frontend:${{ steps.meta.outputs.TAG2 }}

  codeql:
    name: CodeQL
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
